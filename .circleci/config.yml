# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
    test:
        docker:
            # specify the version you desire here
            # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
            - image: circleci/python:3.6.5

            # Specify service dependencies here if necessary
            # CircleCI maintains a library of pre-built images
            # documented at https://circleci.com/docs/2.0/circleci-images/
            # - image: circleci/postgres:9.4
            - image: mdillon/postgis:9.6
              environment:
                  POSTGRES_USER: circleci
                  POSTGRES_DB: circle_test

        working_directory: ~/OIPA

        steps:
            - checkout

            - run:
                  name: Update package lists before installing dependencies
                  command: sudo apt-get update

            - run:
                  name: Install gdal dependencies
                  command: |
                      sudo apt-get install libgdal-dev
                      sudo apt-get install gdal-bin

            - run:
                  name: Install spacialite dependencies
                  command: sudo apt-get install libsqlite3-mod-spatialite

            - run:
                  name: Install Flake8 style guide checker
                  command: sudo apt-get install flake8

            # Download and cache main dependencies:
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "OIPA/requirements.txt" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run:
                  name: Create virtual environment before doing anything
                  command: python3 -m venv env

            - run:
                  name: Install main dependencies
                  command: |
                      . env/bin/activate
                      pip install -r OIPA/requirements.txt

            - save_cache:
                  paths:
                      - ./env
                  key: v1-dependencies-{{ checksum "OIPA/requirements.txt" }}

            - run:
                  name: Run Pytest tests
                  command: |
                      . env/bin/activate
                      # Run tests and generate test coverage report:
                      pytest OIPA/ --cov-report xml
                      # send this report to Codacy:
                      python-codacy-coverage -r coverage.xml
                  environment:
                      # Environment variable to be able to send test coverage to
                      # Codacy:
                      CODACY_PROJECT_TOKEN: 3ea587a799264a99a57a4f3512b5383a

            - store_artifacts:
                  path: test-reports
                  destination: test-reports

            - run:
                  name: Run pep8 code style checks
                  command: |
                      . env/bin/activate
                      flake8 OIPA
    deploy:
        docker:
            - image: circleci/python:3.6.5
        steps:
            - checkout
            - run:
                  name: Add target host to known_hosts files
                  command: |
                      if [ "${CIRCLE_BRANCH}" == "develop" ]; then
                        ssh-keyscan "$SSH_HOST_STAGING" >> ~/.ssh/known_hosts
                      fi
            - add_ssh_keys:
                  name: Add SSH KEY
                  fingerprints:
                      - "5d:59:e5:e3:ce:cf:ec:18:62:3b:e6:fa:86:c7:9b:9a"
            - run: eval ssh-agent -s
            - run:
                  name: Deploy
                  command: |
                      if [ "${CIRCLE_BRANCH}" == "develop" ]; then
                        ssh "$SSH_USER"@"$SSH_HOST_STAGING" "cd OIPA/OIPA; source env/bin/activate; echo '"$SSH_STAGING_PASS"' | sudo -S git pull; pip install -r requirements.txt; ./manage.py migrate; echo '"$SSH_STAGING_PASS"' | sudo -S service supervisor restart"
                      fi
    release:
        docker:
            - image: circleci/node:12.14.1-stretch-browsers
        working_directory: ~/project
        steps:
            - checkout
            - run: npx semantic-release

workflows:
    version: 2
    test_and_deploy:
        jobs:
            - test
            - deploy:
                  requires:
                      - test
            - release:
                  requires:
                      - deploy
                  filters:
                      branches:
                          only:
                              - master
